import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

import java.security.MessageDigest

plugins {
    id('com.android.application')
    id('dev.rikka.tools.refine')
}

apply from: file(rootProject.file('module.gradle'))

android {
    namespace "rikka.sui"
    compileSdk rootProject.ext.targetSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode gitCommitCount
        versionName moduleVersion.substring(1)
        //ndkVersion rootProject.ext.ndkVersion
    }
    buildFeatures {
        viewBinding true
        prefab true
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    buildTypes {
        debug {
            defaultConfig.minSdk 24
            multiDexEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "version"
    productFlavors {
        riru {
            dimension "version"
            externalNativeBuild {
                cmake {
                    arguments "-DRIRU_MODULE_API_VERSION=$moduleRiruApiVersion",
                            "-DRIRU_MODULE_VERSION=$moduleVersionCode",
                            "-DRIRU_MODULE_VERSION_NAME:STRING=\"$moduleVersion\"",
                            "-DFLAVOR=riru",
                            "-DANDROID_STL=none"

                }
            }
        }
        zygisk {
            dimension "version"
            externalNativeBuild {
                cmake {
                    arguments "-DFLAVOR=zygisk",
                            "-DZYGISK_MODULE_ID:STRING=\"$zygiskModuleId\"",
                            "-DANDROID_STL=none"

                }
            }
        }
    }
    lintOptions {
        checkReleaseBuilds false
    }
    dependenciesInfo {
        includeInApk false
    }
}

dependencies {
    implementation libs.refine.runtime

    implementation 'dev.rikka.ndk:riru:26.0.0'
    implementation 'dev.rikka.ndk.thirdparty:cxx:1.2.0'
    implementation 'dev.rikka.ndk.thirdparty:nativehelper:1.0.1'
    implementation 'dev.rikka.rikkax.parcelablelist:parcelablelist:2.0.0'

    implementation "androidx.annotation:annotation:1.3.0"
    implementation 'androidx.core:core:1.9.0'

    implementation project(':aidl')
    implementation project(':shared')
    implementation project(':api')
    implementation project(':rish')
    implementation project(':server-shared')

    implementation libs.hidden.compat
    compileOnly libs.hidden.stub
}

def outDir = file("$rootDir/out")

// 在项目构建完成后执行
afterEvaluate {
    // 判断是否是从IDE中调用
    def isIDE = properties.containsKey('android.injected.invoked.from.ide')
    if (isIDE) {
        println("Invoked from IDE")
    } else {
        println("Invoked from command line")
    }

    // 遍历所有的应用程序变体
    android.applicationVariants.all { variant ->
        // 获取变体名称、构建类型和Flavor名称
        def variantCapped = variant.name.capitalize()//ZygiskRelease
        def variantLowered = variant.name.toLowerCase()//zygiskrelease
        def buildTypeCapped = variant.getBuildType().getName().capitalize()//Release
        def buildTypeLowered = variant.getBuildType().getName().toLowerCase()//release
        def flavorCapped = variantCapped.replaceFirst(buildTypeCapped, "")//Zygisk
        def flavorLowered = variantLowered.replaceFirst(buildTypeLowered, "")//zygisk

        //添加一行日志,输出上面变量的值
        println("variantCapped: $variantCapped variantLowered: $variantLowered buildTypeCapped: $buildTypeCapped buildTypeLowered: $buildTypeLowered flavorCapped: $flavorCapped flavorLowered: $flavorLowered")

        // 定义Magisk模块的名称和目录
        def zipName = "sui-${flavorLowered}-${moduleVersion}-${buildTypeLowered}.zip"
        def magiskDir = file("$outDir/${flavorLowered}_${buildTypeLowered}")

        // 将preBuild任务依赖于assemble任务,先执行 :ui:assemble${buildTypeCapped} 然后再执行
        tasks.getByName("pre${variantCapped}Build").dependsOn(":ui:assemble${buildTypeCapped}")

        // 定义prepareMagiskFiles任务，用于准备Magisk模块文件
        task("prepareMagiskFiles${variantCapped}", type: Sync) {
            dependsOn("assemble$variantCapped")

            // 定义Magisk模块的模板路径
            def templatePath = "$rootDir/template/magisk_module"

            // 将文件从模板路径复制到Magisk模块目录
            into magiskDir
            from(templatePath) {
                // 排除riru.sh、customize.sh、post-fs-data.sh和module.prop文件
                //会在下面几个复制命令中单独处理,因为有变量需要做替换处理
                exclude 'riru.sh', 'customize.sh', 'post-fs-data.sh', 'module.prop'
            }
            if (flavorLowered == 'riru') {
                from(templatePath) {
                    include 'riru.sh'
                    //替换 riru.sh 中的变量
                    filter(ReplaceTokens.class, tokens: [
                            "RIRU_MODULE_LIB_NAME"             : moduleLibraryName,
                            "RIRU_MODULE_API_VERSION"          : moduleRiruApiVersion.toString(),
                            "RIRU_MODULE_MIN_API_VERSION"      : moduleMinRiruApiVersion.toString(),
                            "RIRU_MODULE_MIN_RIRU_VERSION_NAME": moduleMinRiruVersionName,
                    ])
                    filter(FixCrLfFilter.class,
                            eol: FixCrLfFilter.CrLf.newInstance("lf"))
                }
            }
            from(templatePath) {
                include 'customize.sh'
                filter(ReplaceTokens.class, tokens: [
                        "FLAVOR": flavorLowered,
                ])
                filter(FixCrLfFilter.class,
                        eol: FixCrLfFilter.CrLf.newInstance("lf"))
            }
            from(templatePath) {
                include 'post-fs-data.sh'
                filter(ReplaceTokens.class, tokens: [
                        "FLAVOR": flavorLowered,
                ])
                filter(FixCrLfFilter.class,
                        eol: FixCrLfFilter.CrLf.newInstance("lf"))
            }
            from(templatePath) {
                include 'module.prop'
                expand([
                        id         : (flavorLowered == "zygisk") ? zygiskModuleId : riruModuleId,
                        name       : flavorCapped + " - " + moduleName,
                        version    : moduleVersion,
                        versionCode: moduleVersionCode.toString(),
                        author     : moduleAuthor,
                        description: moduleDescription + " " + ((flavorLowered == "zygisk") ?
                                "This module requires Magisk 24.0+ and Zygisk enabled. DO NOT add SystemUI and Settings to DenyList." :
                                "This module requires Riru $moduleMinRiruVersionName or above."),
                        updateJson : (flavorLowered == "zygisk") ?
                                "https://rikkaapps.github.io/release/sui_zygisk.json" :
                                "https://rikkaapps.github.io/release/sui_riru.json",
                ])
                filter(FixCrLfFilter.class,
                        eol: FixCrLfFilter.CrLf.newInstance("lf"))
            }
            from((buildTypeLowered == "release") ?
                    "$buildDir/intermediates/dex/${variant.name}/minify${variantCapped}WithR8" :
                    "$buildDir/intermediates/dex/${variant.name}/mergeDex$variantCapped") {
                include 'classes.dex'
                rename { 'sui.dex' }
            }
            from("$buildDir/intermediates/stripped_native_libs/${variant.name}/out/lib") {
                into 'lib'
            }
            from("${rootProject.findProject('ui').buildDir}/outputs/apk/$buildTypeLowered") {
                exclude 'output-metadata.json'
                rename { 'sui.apk' }
            }
            doLast {
                // 为每个文件生成SHA-256校验和
                fileTree("$magiskDir").visit { f ->
                    if (f.directory) return
                    if (f.file.name == '.gitattributes') return

                    def md = MessageDigest.getInstance("SHA-256")
                    f.file.eachByte 4096, { bytes, size ->
                        md.update(bytes, 0, size)
                    }
                    file(f.file.path + ".sha256sum").text = md.digest().encodeHex()
                }
            }
        }

        // 定义zip任务，用于将Magisk模块打包成zip文件
        task("zip${variantCapped}", type: Zip) {//Zip是Gradle内置的任务, 用于打包zip文件
            //输出一行日志
            dependsOn("prepareMagiskFiles${variantCapped}")
            from magiskDir
            archiveFileName = zipName // zip文件名
            destinationDirectory = outDir // 输出目录
        }

        // 定义push任务，用于将Magisk模块推送到设备上
        task("push${variantCapped}", type: Exec) {//Exec是Gradle内置的任务, 用于执行命令
            //输出一行日志
            dependsOn("assemble${variantCapped}")
            workingDir outDir
            commandLine android.adbExecutable, "push", zipName, "/data/local/tmp/"
        }

        // 定义flash任务，用于在设备上安装Magisk模块
        task("flash${variantCapped}", type: Exec) {
            dependsOn("push${variantCapped}")
            commandLine android.adbExecutable, "shell", "su", "-c",
                    "magisk --install-module /data/local/tmp/${zipName}"
        }

        // 定义flashAndReboot任务，用于在设备上安装Magisk模块并重启设备
        task("flashAndReboot${variantCapped}", type: Exec) {
            dependsOn("flash${variantCapped}")
            commandLine android.adbExecutable, "shell", "reboot"
        }

        // 将 zip${variantCapped} 任务放到 assemble 任务与之后执行
        //variant.assembleProvider.get()是一个Gradle任务的声明，它表示要执行的任务。具体来说，它表示要执行当前变体的构建任务，例如debug或release
        variant.assembleProvider.get().finalizedBy("zip${variantCapped}")
    }
}